This problem was asked by Google.
Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.
For example, given the following Node class
class Node:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
The following test should pass:
node = Node('root', Node('left', Node('left.left')), Node('right'))
assert deserialize(serialize(node)).left.left.val == 'left.left'

--------------------------------------------------------------------------------

top: Node {
    val: root,
    left: Node {
        val: left,
        left: Node {
            val: left.left,
            left: None,
            right: None
        },
        right: None,
    }
    right: Node {
        val: right
        left: None,
        right: None,
    }
}
        root
        /   \
    left    right
    /
left.left

root-left-left.left-None-None-None-right-None-None

: Node {                        root <= left-left.left-None-None-None-right-None-None
    val: root,                  
    left: Node {                left <= left.left-None-None-None-right-None-None
        val: left,              
        left: Node {            left.left <= None-None-None-right-None-None
            val: left.left      
            left: None,         None <= None-None-right-None-None
            right: None,        None <= None-right-None-None
        }
        right: None             None <= right-None-None
    }
    right: Node {               None <= None-None
        val: None,
        left: None,             None <= None
        right: None             None <= ...
    }
}